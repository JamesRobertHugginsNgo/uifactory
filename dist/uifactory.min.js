"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var uiFactoryPropertyDescriptors={definedByUiFactoryPropertyDescriptors:{value:!0},callback:{value:function(e){return"function"==typeof e&&e(this),this},writable:!0},events:{value:function(i,e){var t=this;if(i&&"object"===_typeof(i)){var r=function(o){Object.prototype.hasOwnProperty.call(i,o)&&"function"==typeof i[o]&&t.addEventListener(o,function(){for(var e,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];(e=i[o]).call.apply(e,[this].concat(r,[this]))})};for(var n in i)r(n)}return"function"==typeof e&&e(this),this},writable:!0},_properties:{writable:!0},properties:{value:function(e,t){var s=this,r=0<arguments.length&&void 0!==e?e:this._properties,n=1<arguments.length?t:void 0;this._properties=r;var o=function r(t,n,e){if(t instanceof Promise)return t.then(function(e){return r(e,n)});if("function"==typeof t)return r(t.call(s,s),n);if(Array.isArray(t)){var o={},i=t.map(function(e,t){return o[t]=!0,r(e,t,o)}).filter(function(e){return e instanceof Promise});if(e&&n&&0===Object.keys(o).length&&delete e[n],0<i.length)return Promise.all(i)}if("object"===_typeof(t)&&null!==t){var a=Object.keys(t).map(function(e){return r(t[e],e,t)}).filter(function(e){return e instanceof Promise});if(e&&n&&0===Object.keys(t).length&&delete e[n],0<a.length)return Promise.all(a)}n&&(null==t?s.removeAttribute(n):s.setAttribute(n,t),e&&delete e[n])}(this._properties);return"function"==typeof n&&(o instanceof Promise?o.then(function(){n(s)}):n(this)),this},writable:!0},_contents:{writable:!0},contents:{value:function(e,t,r){var s=this,c=2<arguments.length&&void 0!==r&&r;for(this._contents=e;this.firstChild;)this.removeChild(this.firstChild);var n=function t(r,e){var n=1<arguments.length&&void 0!==e?e:s.appendChild(document.createTextNode(""));if(r instanceof Promise)return r.then(function(e){return t(e,n)});if("function"==typeof r)return t(r(s),n);if(Array.isArray(r)){var o=r.map(function(e){return t(e,s.insertBefore(document.createTextNode(""),n))}).filter(function(e){return e instanceof Promise});return s.removeChild(n),0<o.length&&Promise.all(o)}if(!("object"!==_typeof(r)||null===r||r instanceof Element||r instanceof Text)){var i=Object.keys(r).map(function(e){return t(r[e],s.insertBefore(document.createTextNode(""),n))}).filter(function(e){return e instanceof Promise});return s.removeChild(n),0<i.length&&Promise.all(i)}if("boolean"!=typeof r&&"number"!=typeof r&&"string"!=typeof r)return(r instanceof Element||r instanceof Text)&&s.insertBefore(r,n),s.removeChild(n),r instanceof Element&&r.definedByUiFactoryPropertyDescriptors&&c?r.render():void 0;var a=document.createElement("div");return a.innerHTML=String(r),t(_toConsumableArray(a.childNodes),n)}(this._contents);return"function"==typeof t&&(n instanceof Promise?n.then(function(){t(s)}):t(this)),this},writable:!0},render:{value:function(e){var t=this,r=[new Promise(function(e){return t.properties(t._properties,e)}),new Promise(function(e){return t.contents(t._contents,e,!0)})];return"function"==typeof e&&Promise.all(r).then(function(){e(t)}),this},writable:!0}};function uiFactory(){for(var e,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];if("string"==typeof r[0]&&"string"==typeof r[1]){var o=r[0],i=r[1],a=r[2];e=document.createElementNS(o,i,a)}else if("string"==typeof r[0]){var s=r[0],c=r[1];e=document.createElement(s,c)}else r[0]instanceof Element&&(e=r[0]);e instanceof Element&&(e.definedByUiFactoryPropertyDescriptors||(e=Object.defineProperties(e,uiFactoryPropertyDescriptors)),0<e.childNodes.length&&e.contents.apply(e,_toConsumableArray(e.childNodes)));return e}["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","pre","progress","q","rb","rp","rt","rtc","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"].forEach(function(t){return uiFactory[t]=function(e){return uiFactory(t).callback(e)}}),uiFactory.svg=function(){return uif("http://www.w3.org/2000/svg","svg")},["a","animate","animateMotion","animateTransform","circle","clipPath","color-profile","defs","desc","discard","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","foreignObject","g","hatch","hatchpath","image","line","linearGradient","marker","mask","mesh","meshgradient","meshpatch","meshrow","metadata","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","solidcolor","stop","style","switch","symbol","text","textPath","title","tspan","unknown","use","view"].forEach(function(t){return uiFactory.svg[t]=function(e){return uiFactory("http://www.w3.org/2000/svg",t).callback(e)}});var uif=uif||uiFactory;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
