"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}function uiFactory(e,t,r,o){"string"==typeof e&&(e=document.createElement(e)),e.definedByUiFactoryPropertyDescriptors||Object.defineProperties(e,uiFactory.propertyDescriptors),e.uiFactoryAttributes=t,e.uiFactoryChildElements=r;var n,i=_toConsumableArray(e.childNodes).map(function(e){return e instanceof HTMLElement?uiFactory(e):e});0<i.length&&(e.uiFactoryChildElements=e.uiFactoryChildElements?Array.isArray(e.uiFactoryChildElements)?e.uiFactoryChildElements:[e.uiFactoryChildElements]:[],(n=e.uiFactoryChildElements).unshift.apply(n,_toConsumableArray(i)));return e.render(o,!1)}uiFactory.propertyDescriptors={definedByUiFactoryPropertyDescriptors:{value:!0},uiFactoryAttributes:{writable:!0},uiFactoryChildElements:{writable:!0},render:{value:function(e,t){var u=this,c=!(1<arguments.length&&void 0!==t)||t;return Promise.all([function r(o,t,n){if(null!=o)return o instanceof Promise?o.then(function(e){return r(e,t,n)}):"function"==typeof o?r(o(u),t,n):Array.isArray(o)?Promise.all(o.map(function(e,t){return r(e,t,o)})):"object"===_typeof(o)?Promise.all(Object.keys(o).map(function(e){return u.removeAttribute(e),r(o[e],e,o)})):void(t&&("function"!=typeof n[t]&&delete n[t],u.setAttribute(t,o)))}(this.uiFactoryAttributes),function(e){for(;u.firstChild;)u.removeChild(u.firstChild);return function r(o,n,t,i){if(n=n||u.appendChild(document.createTextNode("")),null!=o){if(o instanceof Promise)return o.then(function(e){return r(e,n,t,i)});if("function"==typeof o)return r(o(u),n,t,i);if(Array.isArray(o)){var e=Promise.all(o.map(function(e,t){return r(e,u.insertBefore(document.createTextNode(""),n),o,t)}));return u.removeChild(n),e}if(o instanceof HTMLElement||o instanceof Text||o instanceof SVGElement)return u.insertBefore(o,n),u.removeChild(n),c&&o.definedByUiFactoryPropertyDescriptors?new Promise(function(e){o.render(e)}):void 0;if("object"!==_typeof(o))return"boolean"==typeof o||"number"==typeof o||"string"==typeof o?(o=uiFactory.stringToHtml(o),t&&i&&"function"!=typeof t[i]&&(t[i]=o),r(o,n,t,i)):void 0;var a=Promise.all(Object.keys(o).map(function(e){return r(o[e],u.insertBefore(document.createTextNode(""),n),o,e)}));return u.removeChild(n),a}u.removeChild(n)}(e)}(this.uiFactoryChildElements)]).then(function(){e&&e(u)}),this}}},uiFactory.stringToHtml=function(e){var t=document.createElement("div");return t.innerHTML=e,_toConsumableArray(t.childNodes).map(function(e){return e instanceof HTMLElement?uiFactory(e):e})},uiFactory.arrayToString=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:" ";return Array.isArray(e)||(e=[e]),e.filter(function(e){return null!=e}).join(t)},uiFactory.when=function(e,t,r){return"function"==typeof e&&(e=e()),e?("function"==typeof t&&(t=t()),t):("function"==typeof r&&(r=r()),r)},uiFactory.exec=function(e){for(var t=arguments.length,r=new Array(1<t?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];return e.apply(void 0,r)},["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","pre","progress","q","rb","rp","rt","rtc","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"].forEach(function(o){uiFactory[o]=function(e,t,r){return uiFactory(o,e,t,r)}}),uiFactory.svg=function(e,t,r,o){return"string"==typeof e&&(e=document.createElementNS("http://www.w3.org/2000/svg",e)),uiFactory(e,t,r,o)},["a","animate","animateMotion","animateTransform","circle","clipPath","color-profile","defs","desc","discard","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","foreignObject","g","hatch","hatchpath","image","line","linearGradient","marker","mask","mesh","meshgradient","meshpatch","meshrow","metadata","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","solidcolor","stop","style","svg","switch","symbol","text","textPath","title","tspan","unknown","use","view"].forEach(function(o){uiFactory.svg[o]=function(e,t,r){return uiFactory.svg(o,e,t,r)}}),window.uif||(window.uif=uiFactory);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
